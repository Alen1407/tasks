import json

class API:
    def __init__(self, json_str):
        self.data = json.loads(json_str)

    def create_class_from_json(self, json_data, class_name):
        if isinstance(json_data, dict):
            class_attrs = {
                key: self.create_class_from_json(value, key.capitalize())
                for key, value in json_data.items()
            }
            return type(class_name, (object,), class_attrs)
        elif isinstance(json_data, list):
            class_attrs = [self.create_class_from_json(item, class_name.capitalize()) for item in json_data]
            return class_attrs
        else:
            return json_data

    def generate_classes(self):
        for class_name, schema_data in self.data["components"]["schemas"].items():
            setattr(self, class_name, self.create_class_from_json(schema_data, class_name))

    def get_task_status_enum(self):
        return self.TaskStatus.enum

    def get_image_task_status_enum(self):
        return self.ImageTaskStatus.enum

# Example usage:
json_str = '''
   {"openapi":"3.0.2","info":{"title":"PicsartAI Text to Image(Stable Diffusion) API","description":"\nPicsartAI API helps you do awesome stuff. ðŸš€\nThis is all in one API endpoint that will help you access all our new \nfeatures. \n<br>\n<br>\nðŸš«\nBear in mind you **shouldn't** access our services directly from mobile/web.\n\n\n<br>\nThere are 2 reasons for that:\n<br>\n1. **Security** - you shouldn't expose our token in your mobile/web app. It \nshould be used only by your backend. In its turn your backend should store this \ntokens in a secure store/vault. If anyone finds your token and makes requests \nwith them **you are in full responsibility** for that.\nIf you don't have a backend team, you can get in touch with \nDavit Aghajanyan (@davit.aghajanyan). He will use default backend gateway.  \n<br>\n2. **Coupled Architecture problem** - AI services are independent APIs. We \ndon't know anything about Picsart's users. If you start to make direct requests\nto our API (without proxy backend) then you will get in trouble while implementing\nsome _authorization business logic_. E.g: Let's say you make direct requests to\nour services. Your BU code is propagated to our global user base. Now you want \nto add following business logic: when user is subscribed they can make X amount\nof requests per day to Enhancement service after which requests should be blocked \nand user should be notified. Also you want to block all unsubscribed users.\n<br>\nAs you can imagine, we don't know who is the request owner, is that user \nsubscribed or not. All of that information and related authorization/business\nlogic should be implemented on your **application backend** side.\nThis will impact your ability to deliver new features in quick manner. And in \nsome cases it might become impossible.   \n\n\n## PHOTO_ID\nMost of our services use so called photo_id. You may wonder \nwhat is that and how to obtain it. \n<br> _Here is the answer_.\n<br> Go to following [Photo Uploader](http://ai.picsart.com/photos/swaggerui). \nUse photo upload service to upload your photo. By the way you should provide \nthe photo_id for your image. Most mobile developers use \nSessionID+SomeDescriptor to identify images!\n\n","version":"0.1.0"},"paths":{"/textToImage/v1/task":{"post":{"tags":[""],"summary":"Post Task","description":"- Possible values for __model_version__ are: ['V14', 'V21', 'MULTISTYLE',\n'V15', 'OPENJOURNEY4', 'DREAMSHAPER', 'ICON', 'PHOTOREALISTIC'].\n\n- Possible sizes for each model are:\n\n     __V14__: ['512x512'],\n\n     __V21__: ['768x768', '1024x1024'],\n\n     __V21_NEW__: ['512x512', '384x512', '1024x576', '1024x1024'],\n\n     __MULTISTYLE__: ['512x512', '512x768', '768x512', '1024x576', '576x1024', '576x768', '1024x1024'],\n\n     __V15__: ['512x512', '384x512', '1024x576', '1024x1024'],\n\n     __OPENJOURNEY4__: ['512x512', '384x512', '1024x576', '1024x1024'],\n\n     __DREAMSHAPER__: ['512x512', '384x512', '1024x576', '1024x1024'],\n\n     __ICON__: ['512x512', '1024x1024'],\n\n     __PHOTOREALISTIC__: ['512x512', '512x768', '768x512', '576x1024', '1024x576', '576x768', '1024x1024']\n\n- Possible values for __sampling_method__ are: ['LMS', 'DDIM', 'DPM', 'Euler',\n 'PNDM', 'DDPM', 'Euler A']","operationId":"post_task_textToImage_v1_task_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TaskPostBody"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetTaskOutput"}}},"results":{"created_at":1646115092.178645,"tmp_url":"url"},"finished_at":1646115092.178645,"started_at":1646115092.178645,"transaction_id":26082838,"submitted_at":1646115092.178645,"status":"DONE","tmp_url_expired_at":1646115092.178645},"404":{"description":"The item was not found or expired."},"401":{"description":"Not authorized request."},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"PicsartAIAuth":[]}]}},"/textToImage/v1/task_sync":{"post":{"tags":[""],"summary":"Post Task","description":"- Possible values for __model_version__ are: ['V14', 'V21', 'MULTISTYLE',\n'V15', 'OPENJOURNEY4', 'DREAMSHAPER', 'ICON', 'PHOTOREALISTIC'].\n\n- Possible sizes for each model are:\n\n     __V14__: ['512x512'],\n\n     __V21__: ['768x768', '1024x1024'],\n\n     __V21_NEW__: ['512x512', '384x512', '1024x576', '1024x1024'],\n\n     __MULTISTYLE__: ['512x512', '512x768', '768x512', '1024x576', '576x1024', '576x768', '1024x1024'],\n\n     __V15__: ['512x512', '384x512', '1024x576', '1024x1024'],\n\n     __OPENJOURNEY4__: ['512x512', '384x512', '1024x576', '1024x1024'],\n\n     __DREAMSHAPER__: ['512x512', '384x512', '1024x576', '1024x1024'],\n\n     __ICON__: ['512x512', '1024x1024'],\n\n     __PHOTOREALISTIC__: ['512x512', '512x768', '768x512', '576x1024', '1024x576', '576x768', '1024x1024']\n\n- Possible values for __sampling_method__ are: ['LMS', 'DDIM', 'DPM', 'Euler',\n 'PNDM', 'DDPM', 'Euler A']","operationId":"post_task_textToImage_v1_task_sync_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TaskPostBody"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetTaskOutput"}}},"results":{"created_at":1646115092.178645,"tmp_url":"url"},"finished_at":1646115092.178645,"started_at":1646115092.178645,"transaction_id":26082838,"submitted_at":1646115092.178645,"status":"DONE","tmp_url_expired_at":1646115092.178645},"404":{"description":"The item was not found or expired."},"401":{"description":"Not authorized request."},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"PicsartAIAuth":[]}]}},"/textToImage/v1/task/{task_id}":{"get":{"tags":[""],"summary":"Get Pipeline","operationId":"get_pipeline_textToImage_v1_task__task_id__get","parameters":[{"required":true,"schema":{"title":"Task Id"},"name":"task_id","in":"path"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetTaskOutput"}}},"results":{"created_at":1646115092.178645,"tmp_url":"url"},"finished_at":1646115092.178645,"started_at":1646115092.178645,"transaction_id":26082838,"submitted_at":1646115092.178645,"status":"DONE","tmp_url_expired_at":1646115092.178645},"404":{"description":"The item was not found or expired."},"401":{"description":"Not authorized request."},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"PicsartAIAuth":[]}]}},"/textToImage/v1/health":{"get":{"tags":[""],"summary":"Enhancement Health","operationId":"enhancement_health_textToImage_v1_health_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}}},"components":{"schemas":{"GetTaskOutput":{"title":"GetTaskOutput","required":["id","status","data","original_request"],"type":"object","properties":{"id":{"title":"Id","type":"string"},"status":{"$ref":"#/components/schemas/TaskStatus"},"total_duration":{"title":"Estimated total time of processingof all images.","type":"integer"},"total_count":{"title":"Number of images that will fit intimeout window and will be returned.For example you might send request asking 6 images, however we return only 4 images, due to service overload.","type":"integer"},"data":{"title":"Data","type":"array","items":{"$ref":"#/components/schemas/ImageTask"}},"original_request":{"$ref":"#/components/schemas/TaskPostBody"}}},"HTTPValidationError":{"title":"HTTPValidationError","type":"object","properties":{"detail":{"title":"Detail","type":"array","items":{"$ref":"#/components/schemas/ValidationError"}}}},"ImageTask":{"title":"ImageTask","required":["status"],"type":"object","properties":{"id":{"title":"Image id.","type":"string"},"created":{"title":"UTC timestamp when task was created.","type":"number"},"started_at":{"title":"UTC timestamp when worker started to process the task.","type":"number"},"finished_at":{"title":"UTC timestamp when task finished by worker.","type":"number"},"url":{"title":"Url","type":"string"},"status":{"$ref":"#/components/schemas/ImageTaskStatus"},"model_version":{"$ref":"#/components/schemas/ModelVersion"}}},"ImageTaskStatus":{"title":"ImageTaskStatus","enum":["ACCEPTED","IN_PROGRESS","DONE","FAILED","FAILED_TIMEOUT","FAILED_NSFW"],"description":"An enumeration."},"ModelVersion":{"title":"ModelVersion","enum":["V14","V21","V21_NEW","MULTISTYLE","V15","OPENJOURNEY4","DREAMSHAPER","ICON","PHOTOREALISTIC"],"type":"string","description":"An enumeration."},"SamplingMethod":{"title":"SamplingMethod","enum":["LMS","DDIM","DPM","Euler","PNDM","DDPM","Euler A"],"type":"string","description":"An enumeration."},"TaskPostBody":{"title":"TaskPostBody","type":"object","properties":{"caption":{"title":"Text description of the image.","type":"string"},"negative_prompt":{"title":"The prompt to avoid specific content.","type":"string","default":" "},"model_version":{"title":"Model version","allOf":[{"$ref":"#/components/schemas/ModelVersion"}],"default":"V14"},"size":{"title":"The desired output size.","pattern":"^\\d+x\\d+$","type":"string","default":"512x512"},"sampling_method":{"title":"Sampling method","allOf":[{"$ref":"#/components/schemas/SamplingMethod"}]},"sampling_steps":{"title":"Sampling steps","type":"integer","default":20},"count":{"title":"Number of images to return.","type":"integer"}},"example":{"caption":"Cat sitting on piano!","negative_prompt":"over saturation","size":"512x512","model_version":"V14","sampling_method":"Euler A","sampling_steps":30,"count":6}},"TaskStatus":{"title":"TaskStatus","enum":["ACCEPTED","IN_PROGRESS","DONE"],"description":"An enumeration."},"ValidationError":{"title":"ValidationError","required":["loc","msg","type"],"type":"object","properties":{"loc":{"title":"Location","type":"array","items":{"type":"string"}},"msg":{"title":"Message","type":"string"},"type":{"title":"Error Type","type":"string"}}}},"securitySchemes":{"PicsartAIAuth":{"type":"http","scheme":"bearer"}}}}
'''

my_api = API(json_str)
my_api.generate_classes()

# Accessing the dynamically generated classes
print(my_api.TaskStatus.enum)  # Output: ['ACCEPTED', 'IN_PROGRESS', 'DONE']
print(my_api.GetTaskOutput.properties.status.enum)  # Output: ['ACCEPTED', 'IN_PROGRESS', 'DONE', 'FAILED', 'FAILED_TIMEOUT', 'FAILED_NSFW']

# Accessing other classes and their attributes
print(my_api.GetTaskOutput.title)  # Output: 'GetTaskOutput'
print(my_api.GetTaskOutput.properties.data.title)  # Output: 'Data'
